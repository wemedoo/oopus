// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sReportsV2.DAL.Sql.Sql;

#nullable disable

namespace sReportsV2.Domain.Sql.Migrations
{
    [DbContext(typeof(SReportsContext))]
    [Migration("20240816122927_AddSystemVersioningToTables")]
    partial class AddSystemVersioningToTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.AccessManagment.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModuleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModuleId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.AccessManagment.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PermissionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.AccessManagment.PermissionModule", b =>
                {
                    b.Property<int>("PermissionModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PermissionModuleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionModuleId"));

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("PermissionModuleId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionModules");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.AccessManagment.PositionPermission", b =>
                {
                    b.Property<int>("PositionPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionPermissionId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("PermissionModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("PositionCD")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PositionPermissionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PermissionModuleId");

                    b.HasIndex("PositionCD");

                    b.ToTable("PositionPermissions");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Aliases.CodeAliasView", b =>
                {
                    b.Property<int>("AliasId")
                        .HasColumnType("int")
                        .HasColumnName("AliasId");

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CodeId")
                        .HasColumnType("int");

                    b.Property<int>("CodeSetId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InboundAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InboundAliasId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OutboundAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutboundAliasId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("System")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AliasId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.ToTable((string)null);

                    b.ToView("CodeAliasViews", (string)null);
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Aliases.InboundAlias", b =>
                {
                    b.Property<int>("AliasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AliasId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("OutboundAliasId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("System")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AliasId");

                    b.HasIndex("CodeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("OutboundAliasId");

                    b.ToTable("InboundAliases");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Aliases.OutboundAlias", b =>
                {
                    b.Property<int>("AliasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AliasId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("System")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AliasId");

                    b.HasIndex("CodeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.ToTable("OutboundAliases");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ApiRequest.ApiRequestLog", b =>
                {
                    b.Property<int>("ApiRequestLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApiRequestLogId"));

                    b.Property<string>("ApiName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApiRequestDirection")
                        .HasColumnType("int");

                    b.Property<short?>("HttpStatusCode")
                        .HasColumnType("smallint");

                    b.Property<string>("RequestPayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RequestTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RequestUriAbsolutePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsePayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ResponseTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ApiRequestLogId");

                    b.ToTable("ApiRequestLogs");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.BodySurfaceCalculationFormula", b =>
                {
                    b.Property<int>("BodySurfaceCalculationFormulaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BodySurfaceCalculationFormulaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodySurfaceCalculationFormulaId"));

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BodySurfaceCalculationFormulaId");

                    b.ToTable("BodySurfaceCalculationFormulas");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.ChemotherapySchema", b =>
                {
                    b.Property<int>("ChemotherapySchemaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChemotherapySchemaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChemotherapySchemaId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("AreCoursesLimited")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LengthOfCycle")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfCycles")
                        .HasColumnType("int");

                    b.Property<int>("NumOfLimitedCourses")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ChemotherapySchemaId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EntityStateCD");

                    b.ToTable("ChemotherapySchemas");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.Indication", b =>
                {
                    b.Property<int>("IndicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IndicationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndicationId"));

                    b.Property<int>("ChemotherapySchemaId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IndicationId");

                    b.HasIndex("ChemotherapySchemaId");

                    b.ToTable("Indications");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.LiteratureReference", b =>
                {
                    b.Property<int>("LiteratureReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LiteratureReferenceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LiteratureReferenceId"));

                    b.Property<int>("ChemotherapySchemaId")
                        .HasColumnType("int");

                    b.Property<string>("DOI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PubMedID")
                        .HasColumnType("int");

                    b.Property<string>("PubMedLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortReferenceNotation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LiteratureReferenceId");

                    b.HasIndex("ChemotherapySchemaId");

                    b.ToTable("LiteratureReferences");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.Medication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AdditionalInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BodySurfaceCalculationFormula")
                        .HasColumnType("int");

                    b.Property<int?>("ChemotherapySchemaId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("CumulativeDose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CumulativeDoseUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Dose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("HasMaximalCumulativeDose")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportiveMedication")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MaxDayNumberOfApplicationiDelay")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreparationInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RouteOfAdministration")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("SameDoseForEveryAplication")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportiveMedicationAlternative")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportiveMedicationReserve")
                        .HasColumnType("bit");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<bool>("WeekendHolidaysExcluded")
                        .HasColumnType("bit");

                    b.HasKey("MedicationId");

                    b.HasIndex("ChemotherapySchemaId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CumulativeDoseUnitId");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("UnitId");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.MedicationDose", b =>
                {
                    b.Property<int>("MedicationDoseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicationDoseId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationDoseId"));

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<int?>("IntervalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("MedicationDoseId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("UnitId");

                    b.ToTable("MedicationDoses");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.MedicationDoseTime", b =>
                {
                    b.Property<int>("MedicationDoseTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicationDoseTimeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationDoseTimeId"));

                    b.Property<string>("Dose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicationDoseId")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicationDoseTimeId");

                    b.HasIndex("MedicationDoseId");

                    b.ToTable("MedicationDoseTimes");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.MedicationDoseType", b =>
                {
                    b.Property<int>("MedicationDoseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicationDoseTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationDoseTypeId"));

                    b.Property<string>("Intervals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicationDoseTypeId");

                    b.ToTable("MedicationDoseTypes");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.RouteOfAdministration", b =>
                {
                    b.Property<int>("RouteOfAdministrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RouteOfAdministrationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteOfAdministrationId"));

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FDACode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NCICondeptId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RouteOfAdministrationId");

                    b.ToTable("RouteOfAdministrations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UnitId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.ChemotherapySchemaInstance", b =>
                {
                    b.Property<int>("ChemotherapySchemaInstanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChemotherapySchemaInstanceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChemotherapySchemaInstanceId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ChemotherapySchemaId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("ChemotherapySchemaInstanceId");

                    b.HasIndex("ChemotherapySchemaId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PatientId");

                    b.ToTable("ChemotherapySchemaInstances");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.ChemotherapySchemaInstanceVersion", b =>
                {
                    b.Property<int>("ChemotherapySchemaInstanceVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChemotherapySchemaInstanceVersionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChemotherapySchemaInstanceVersionId"));

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ChemotherapySchemaInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int>("DelayFor")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FirstDelayDay")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReasonForDelay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ChemotherapySchemaInstanceVersionId");

                    b.HasIndex("ChemotherapySchemaInstanceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EntityStateCD");

                    b.ToTable("ChemotherapySchemaInstanceVersions");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.MedicationDoseInstance", b =>
                {
                    b.Property<int>("MedicationDoseInstanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicationDoseInstanceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationDoseInstanceId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<int?>("IntervalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicationInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("MedicationDoseInstanceId");

                    b.HasIndex("MedicationInstanceId");

                    b.HasIndex("UnitId");

                    b.ToTable("MedicationDoseInstances");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.MedicationDoseTimeInstance", b =>
                {
                    b.Property<int>("MedicationDoseTimeInstanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicationDoseTimeInstanceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationDoseTimeInstanceId"));

                    b.Property<string>("Dose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicationDoseInstanceId")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicationDoseTimeInstanceId");

                    b.HasIndex("MedicationDoseInstanceId");

                    b.ToTable("MedicationDoseTimeInstances");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.MedicationInstance", b =>
                {
                    b.Property<int>("MedicationInstanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicationInstanceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationInstanceId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ChemotherapySchemaInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("MedicationInstanceId");

                    b.HasIndex("ChemotherapySchemaInstanceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("MedicationId");

                    b.ToTable("MedicationInstances");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.MedicationReplacement", b =>
                {
                    b.Property<int>("MedicationReplacementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicationReplacementId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationReplacementId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ChemotherapySchemaInstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ReplaceMedicationId")
                        .HasColumnType("int");

                    b.Property<int>("ReplaceWithMedicationId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("MedicationReplacementId");

                    b.HasIndex("ChemotherapySchemaInstanceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("ReplaceMedicationId");

                    b.HasIndex("ReplaceWithMedicationId");

                    b.ToTable("MedicationReplacements");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ClinicalTrial.ClinicalTrial", b =>
                {
                    b.Property<int>("ClinicalTrialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClinicalTrialId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClinicalTrialId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ClinicalTrialAcronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicalTrialDataManagementProvider")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ClinicalTrialDataProviderIdentifier")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClinicalTrialDataProviderIdentifier");

                    b.Property<string>("ClinicalTrialIdentifier")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int?>("ClinicalTrialIdentifierTypeCD")
                        .HasColumnType("int");

                    b.Property<int?>("ClinicalTrialRecruitmentStatusCD")
                        .HasColumnType("int")
                        .HasColumnName("ClinicalTrialRecruitmentStatusCD");

                    b.Property<string>("ClinicalTrialSponsorIdentifier")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClinicalTrialSponsorIdentifier");

                    b.Property<int?>("ClinicalTrialSponsorIdentifierTypeCD")
                        .HasColumnType("int");

                    b.Property<string>("ClinicalTrialSponsorName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ClinicalTrialTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ClinicalTrialId");

                    b.HasIndex("ClinicalTrialIdentifierTypeCD");

                    b.HasIndex("ClinicalTrialRecruitmentStatusCD");

                    b.HasIndex("ClinicalTrialSponsorIdentifierTypeCD");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("ProjectId");

                    b.ToTable("ClinicalTrials");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.CodeEntry.CodeAssociation", b =>
                {
                    b.Property<int>("CodeAssociationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeAssociationId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ChildId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CodeAssociationId");

                    b.HasIndex("ChildId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("ParentId");

                    b.ToTable("CodeAssociations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.CodeEntry.FormCodeRelation", b =>
                {
                    b.Property<int>("FormCodeRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormCodeRelationId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CodeCD")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FormId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("FormCodeRelationId");

                    b.HasIndex("CodeCD");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.ToTable("FormCodeRelations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.CodeSystem.CodeSystem", b =>
                {
                    b.Property<int>("CodeSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CodeSystemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeSystemId"));

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SAB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodeSystemId");

                    b.ToTable("CodeSystems");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Common.Code", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CodeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CodeSetId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ThesaurusEntryId")
                        .HasColumnType("int");

                    b.HasKey("CodeId");

                    b.HasIndex("CodeSetId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("ThesaurusEntryId");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Common.CodeSet", b =>
                {
                    b.Property<int>("CodeSetId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("ApplicableInDesigner")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ThesaurusEntryId")
                        .HasColumnType("int");

                    b.HasKey("CodeSetId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("ThesaurusEntryId");

                    b.ToTable("CodeSets");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Encounter.Encounter", b =>
                {
                    b.Property<int>("EncounterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EncounterId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EncounterId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("AdmissionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("AdmitSourceCD")
                        .HasColumnType("int");

                    b.Property<int?>("ClassCD")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DischargeDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EpisodeOfCareId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("ServiceTypeCD")
                        .HasColumnType("int");

                    b.Property<int?>("StatusCD")
                        .HasColumnType("int");

                    b.Property<int?>("TypeCD")
                        .HasColumnType("int");

                    b.HasKey("EncounterId");

                    b.HasIndex("AdmitSourceCD");

                    b.HasIndex("ClassCD");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("EpisodeOfCareId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceTypeCD");

                    b.HasIndex("StatusCD");

                    b.HasIndex("TypeCD");

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Encounter.EncounterIdentifier", b =>
                {
                    b.Property<int>("EncounterIdentifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EncounterIdentifierId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EncounterId")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IdentifierPoolCD")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierTypeCD")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierUseCD")
                        .HasColumnType("int");

                    b.Property<string>("IdentifierValue")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("EncounterIdentifierId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EncounterId");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("IdentifierPoolCD");

                    b.HasIndex("IdentifierTypeCD");

                    b.HasIndex("IdentifierUseCD");

                    b.ToTable("EncounterIdentifiers");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Encounter.EncounterView", b =>
                {
                    b.Property<int>("EncounterId")
                        .HasColumnType("int")
                        .HasColumnName("EncounterId");

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("AdmissionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DischargeDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EpisodeOfCareId")
                        .HasColumnType("int");

                    b.Property<int?>("EpisodeOfCareTypeCD")
                        .HasColumnType("int");

                    b.Property<int?>("GenderCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NameFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameGiven")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("StatusCD")
                        .HasColumnType("int");

                    b.Property<int?>("TypeCD")
                        .HasColumnType("int");

                    b.HasKey("EncounterId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.ToTable((string)null);

                    b.ToView("EncounterViews", (string)null);
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Encounter.PersonnelEncounterRelation", b =>
                {
                    b.Property<int>("PersonnelEncounterRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonnelEncounterRelationId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("EncounterId")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<int?>("RelationTypeCD")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PersonnelEncounterRelationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EncounterId");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("RelationTypeCD");

                    b.ToTable("PersonnelEncounterRelations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.EpisodeOfCare.EpisodeOfCare", b =>
                {
                    b.Property<int>("EpisodeOfCareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EpisodeOfCareId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EpisodeOfCareId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosisCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosisRank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiagnosisRole")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonnelTeamId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SmartOncologyPatientId")
                        .HasColumnType("int")
                        .HasColumnName("SmartOncologyPatientId");

                    b.Property<int>("StatusCD")
                        .HasColumnType("int")
                        .HasColumnName("StatusCD");

                    b.Property<int>("TypeCD")
                        .HasColumnType("int")
                        .HasColumnName("TypeCD");

                    b.HasKey("EpisodeOfCareId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PatientId");

                    b.HasIndex("PersonnelTeamId");

                    b.HasIndex("SmartOncologyPatientId");

                    b.HasIndex("StatusCD");

                    b.HasIndex("TypeCD");

                    b.ToTable("EpisodeOfCares");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.EpisodeOfCare.EpisodeOfCareWorkflow", b =>
                {
                    b.Property<int>("EpisodeOfCareWorkflowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EpisodeOfCareWorkflowId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EpisodeOfCareWorkflowId"));

                    b.Property<string>("DiagnosisCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiagnosisRole")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeOfCareId")
                        .HasColumnType("int");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<int>("StatusCD")
                        .HasColumnType("int")
                        .HasColumnName("StatusCD");

                    b.Property<DateTimeOffset>("Submited")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("EpisodeOfCareWorkflowId");

                    b.HasIndex("EpisodeOfCareId");

                    b.ToTable("EpisodeOfCareWorkflows");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.FormComment.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CommentRef")
                        .HasColumnType("int");

                    b.Property<int>("CommentState")
                        .HasColumnType("int")
                        .HasColumnName("CommentStateCD");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FormRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.GlobalThesaurusUser.GlobalThesaurusRole", b =>
                {
                    b.Property<int>("GlobalThesaurusRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GlobalThesaurusRoleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GlobalThesaurusRoleId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("GlobalThesaurusRoleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.ToTable("GlobalThesaurusRoles");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.GlobalThesaurusUser.GlobalThesaurusUser", b =>
                {
                    b.Property<int>("GlobalThesaurusUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GlobalThesaurusUserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GlobalThesaurusUserId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Affiliation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("Source")
                        .HasColumnType("int")
                        .HasColumnName("SourceCD");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("StatusCD");

                    b.HasKey("GlobalThesaurusUserId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.ToTable("GlobalThesaurusUsers");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.GlobalThesaurusUser.GlobalThesaurusUserRole", b =>
                {
                    b.Property<int>("GlobalThesaurusUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GlobalThesaurusUserRoleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GlobalThesaurusUserRoleId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("GlobalThesaurusRoleId")
                        .HasColumnType("int");

                    b.Property<int>("GlobalThesaurusUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("GlobalThesaurusUserRoleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("GlobalThesaurusRoleId");

                    b.HasIndex("GlobalThesaurusUserId");

                    b.ToTable("GlobalThesaurusUserRoles");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.HL7.ErrorMessageLog", b =>
                {
                    b.Property<int>("ErrorMessageLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ErrorMessageLogId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ErrorText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ErrorTypeCD")
                        .HasColumnType("int");

                    b.Property<string>("HL7EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HL7MessageLogId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SourceSystemCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TransactionDatetime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ErrorMessageLogId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("ErrorTypeCD");

                    b.HasIndex("HL7MessageLogId");

                    b.HasIndex("SourceSystemCD");

                    b.ToTable("ErrorMessageLogs");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.HL7.HL7MessageLog", b =>
                {
                    b.Property<int>("HL7MessageLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HL7MessageLogId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageControlId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("HL7MessageLogId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.ToTable("HL7MessageLogs");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.HL7.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EncounterId")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FhirResource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HL7EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HL7MessageLogId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SourceSystemCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TransactionDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("TransactionDirectionCD")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EncounterId");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("HL7MessageLogId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SourceSystemCD");

                    b.HasIndex("TransactionDirectionCD");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.ClinicalDomain", b =>
                {
                    b.Property<int>("ClinicalDomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClinicalDomainId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClinicalDomainId"));

                    b.Property<int>("CodeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClinicalDomainId");

                    b.ToTable("ClinicalDomains");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Impressum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfUsers")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationAddressId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationRelationId")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZoneOffset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypesString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("OrganizationAddressId");

                    b.HasIndex("OrganizationRelationId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.OrganizationAddress", b =>
                {
                    b.Property<int>("OrganizationAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationAddressId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("AddressTypeCD")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CountryCD")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("OrganizationAddressId");

                    b.HasIndex("AddressTypeCD");

                    b.HasIndex("CountryCD");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.ToTable("OrganizationAddresses");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.OrganizationClinicalDomain", b =>
                {
                    b.Property<int>("OrganizationClinicalDomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationClinicalDomainId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationClinicalDomainId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ClinicalDomainCD")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("OrganizationClinicalDomainId");

                    b.HasIndex("ClinicalDomainCD");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationClinicalDomains");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.OrganizationCommunicationEntity", b =>
                {
                    b.Property<int>("OrgCommunicationEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrgCommunicationEntityId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrgCommunicationEntityId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("OrgCommunicationEntityCD")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryCommunicationSystemCD")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SecondaryCommunicationSystemCD")
                        .HasColumnType("int");

                    b.HasKey("OrgCommunicationEntityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("OrgCommunicationEntityCD");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PrimaryCommunicationSystemCD");

                    b.HasIndex("SecondaryCommunicationSystemCD");

                    b.ToTable("OrganizationCommunicationEntities");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.OrganizationIdentifier", b =>
                {
                    b.Property<int>("OrganizationIdentifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationIdentifierId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IdentifierPoolCD")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierTypeCD")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierUseCD")
                        .HasColumnType("int");

                    b.Property<string>("IdentifierValue")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("OrganizationIdentifierId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("IdentifierPoolCD");

                    b.HasIndex("IdentifierTypeCD");

                    b.HasIndex("IdentifierUseCD");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationIdentifiers");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.OrganizationRelation", b =>
                {
                    b.Property<int>("OrganizationRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrganizationRelationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationRelationId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("OrganizationRelationId");

                    b.HasIndex("ChildId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("ParentId");

                    b.ToTable("OrganizationRelations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.OrganizationTelecom", b =>
                {
                    b.Property<int>("OrganizationTelecomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationTelecomId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SystemCD")
                        .HasColumnType("int");

                    b.Property<int?>("UseCD")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationTelecomId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SystemCD");

                    b.HasIndex("UseCD");

                    b.ToTable("OrganizationTelecoms");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OutsideUser.OutsideUser", b =>
                {
                    b.Property<int>("OutsideUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OutsideUserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutsideUserId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("OutsideUserAddressId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("OutsideUserId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("OutsideUserAddressId");

                    b.ToTable("OutsideUsers");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OutsideUser.OutsideUserAddress", b =>
                {
                    b.Property<int>("OutsideUserAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutsideUserAddressId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("AddressTypeCD")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CountryCD")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("OutsideUserAddressId");

                    b.HasIndex("AddressTypeCD");

                    b.HasIndex("CountryCD");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.ToTable("OutsideUserAddresses");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.Communication", b =>
                {
                    b.Property<int>("CommunicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommunicationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommunicationId"));

                    b.Property<int?>("LanguageCD")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientId");

                    b.Property<bool>("Preferred")
                        .HasColumnType("bit");

                    b.Property<int?>("SmartOncologyPatientId")
                        .HasColumnType("int")
                        .HasColumnName("SmartOncologyPatientId");

                    b.HasKey("CommunicationId");

                    b.HasIndex("LanguageCD");

                    b.HasIndex("PatientId");

                    b.HasIndex("SmartOncologyPatientId");

                    b.ToTable("Communications");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.MultipleBirth", b =>
                {
                    b.Property<int>("MultipleBirthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MultipleBirthId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MultipleBirthId"));

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<bool>("isMultipleBorn")
                        .HasColumnType("bit");

                    b.HasKey("MultipleBirthId");

                    b.ToTable("MultipleBirths");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CitizenshipCD")
                        .HasColumnType("int")
                        .HasColumnName("CitizenshipCD");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool?>("Deceased")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeceasedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("GenderCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MaritalStatusCD")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(129)
                        .HasColumnType("nvarchar(129)");

                    b.Property<int?>("MultipleBirthId")
                        .HasColumnType("int")
                        .HasColumnName("MultipleBirthId");

                    b.Property<string>("NameFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameGiven")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("ReligionCD")
                        .HasColumnType("int")
                        .HasColumnName("ReligionCD");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PatientId");

                    b.HasIndex("CitizenshipCD");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("GenderCD");

                    b.HasIndex("MaritalStatusCD");

                    b.HasIndex("MultipleBirthId");

                    b.HasIndex("ReligionCD");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.PatientAddress", b =>
                {
                    b.Property<int>("PatientAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientAddressId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientAddressId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("AddressTypeCD")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CountryCD")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("PatientAddressId");

                    b.HasIndex("AddressTypeCD");

                    b.HasIndex("CountryCD");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAddresses");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.PatientContact", b =>
                {
                    b.Property<int>("PatientContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientContactId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientContactId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ContactRelationshipCD")
                        .HasColumnType("int");

                    b.Property<int?>("ContactRoleCD")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ContactRoleEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContactRoleStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("GenderCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NameFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameGiven")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PatientContactId");

                    b.HasIndex("ContactRelationshipCD");

                    b.HasIndex("ContactRoleCD");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("GenderCD");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientContacts");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.PatientContactAddress", b =>
                {
                    b.Property<int>("PatientContactAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientContactAddressId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientContactAddressId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("AddressTypeCD")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CountryCD")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PatientContactId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("PatientContactAddressId");

                    b.HasIndex("AddressTypeCD");

                    b.HasIndex("CountryCD");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PatientContactId");

                    b.ToTable("PatientContactAddresses");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.PatientContactTelecom", b =>
                {
                    b.Property<int>("PatientContactTelecomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientContactTelecomId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientContactTelecomId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PatientContactId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SystemCD")
                        .HasColumnType("int");

                    b.Property<int?>("UseCD")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientContactTelecomId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PatientContactId");

                    b.HasIndex("SystemCD");

                    b.HasIndex("UseCD");

                    b.ToTable("PatientContactTelecoms");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.PatientIdentifier", b =>
                {
                    b.Property<int>("PatientIdentifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientIdentifierId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IdentifierPoolCD")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierTypeCD")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierUseCD")
                        .HasColumnType("int");

                    b.Property<string>("IdentifierValue")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PatientIdentifierId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("IdentifierPoolCD");

                    b.HasIndex("IdentifierTypeCD");

                    b.HasIndex("IdentifierUseCD");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientIdentifiers");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.PatientTelecom", b =>
                {
                    b.Property<int>("PatientTelecomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientTelecomId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientTelecomId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SystemCD")
                        .HasColumnType("int");

                    b.Property<int?>("UseCD")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientTelecomId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PatientId");

                    b.HasIndex("SystemCD");

                    b.HasIndex("UseCD");

                    b.ToTable("PatientTelecoms");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.PatientList.PatientList", b =>
                {
                    b.Property<int>("PatientListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientListId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ArePatientsSelected")
                        .HasColumnType("bit");

                    b.Property<int?>("AttendingDoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EncounterStatusCD")
                        .HasColumnType("int");

                    b.Property<int?>("EncounterTypeCD")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("EpisodeOfCareTypeCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PatientListName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonnelTeamId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PatientListId");

                    b.HasIndex("AttendingDoctorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EncounterStatusCD");

                    b.HasIndex("EncounterTypeCD");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("EpisodeOfCareTypeCD");

                    b.HasIndex("PersonnelTeamId");

                    b.ToTable("PatientLists");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.PatientList.PatientListPatientRelation", b =>
                {
                    b.Property<int>("PatientListPatientRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientListPatientRelationId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PatientListId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PatientListPatientRelationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PatientId");

                    b.HasIndex("PatientListId");

                    b.ToTable("PatientListPatientRelations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.PatientList.PatientListPersonnelRelation", b =>
                {
                    b.Property<int>("PatientListPersonnelRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientListPersonnelRelationId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PatientListId")
                        .HasColumnType("int");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PatientListPersonnelRelationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PatientListId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("PatientListPersonnelRelations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.PersonnelTeamEntities.PersonnelTeam", b =>
                {
                    b.Property<int>("PersonnelTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonnelTeamId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonnelTeamId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("TypeCD")
                        .HasColumnType("int");

                    b.HasKey("PersonnelTeamId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("TypeCD");

                    b.ToTable("PersonnelTeams");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.PersonnelTeamEntities.PersonnelTeamOrganizationRelation", b =>
                {
                    b.Property<int>("PersonnelTeamOrganizationRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonnelTeamOrganizationRelationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonnelTeamOrganizationRelationId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonnelTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("RelationTypeCD")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PersonnelTeamOrganizationRelationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonnelTeamId");

                    b.HasIndex("RelationTypeCD");

                    b.ToTable("PersonnelTeamOrganizationRelations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.PersonnelTeamEntities.PersonnelTeamRelation", b =>
                {
                    b.Property<int>("PersonnelTeamRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonnelTeamRelationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonnelTeamRelationId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonnelTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("RelationTypeCD")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PersonnelTeamRelationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("PersonnelTeamId");

                    b.HasIndex("RelationTypeCD");

                    b.ToTable("PersonnelTeamRelations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ProjectEntry.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ProjectEndDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ProjectStartDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ProjectTypeCD")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("ProjectTypeCD");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ProjectEntry.ProjectDocumentRelation", b =>
                {
                    b.Property<int>("ProjectPersonnelRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectPersonnelRelationId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FormId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProjectPersonnelRelationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDocumentRelations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ProjectEntry.ProjectPatientRelation", b =>
                {
                    b.Property<int>("ProjectPatientRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectPatientRelationId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProjectPatientRelationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPatientRelations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ProjectEntry.ProjectPersonnelRelation", b =>
                {
                    b.Property<int>("ProjectPersonnelRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectPersonnelRelationId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProjectPersonnelRelationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPersonnelRelations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.SmartOncologyPatient.SmartOncologyPatient", b =>
                {
                    b.Property<int>("SmartOncologyPatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SmartOncologyPatientId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SmartOncologyPatientId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Anatomy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CapabilityToWork")
                        .HasColumnType("int");

                    b.Property<int>("ChemotherapyCourse")
                        .HasColumnType("int");

                    b.Property<int>("ChemotherapyCycle")
                        .HasColumnType("int");

                    b.Property<string>("ChemotherapyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicalTrials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConsecutiveChemotherapyDays")
                        .HasColumnType("int");

                    b.Property<int>("Contraception")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CopyDeliveredOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("DesireToHaveChildren")
                        .HasColumnType("bit");

                    b.Property<int>("DiseaseContextAtCurrentPresentation")
                        .HasColumnType("int");

                    b.Property<int>("DiseaseContextAtInitialPresentation")
                        .HasColumnType("int");

                    b.Property<bool>("EggCellCryopreservation")
                        .HasColumnType("bit");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("FertilityConservation")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FirstDayOfChemotherapy")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GenderCD")
                        .HasColumnType("int");

                    b.Property<string>("HistoryOfOncologicalDisease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospitalOrPraxisOfPreviousTreatments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Morphology")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MultipleBirthId")
                        .HasColumnType("int")
                        .HasColumnName("MultipleBirthId");

                    b.Property<string>("NameFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameGiven")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PatientInfoSignedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientInformedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientInformedFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PreviousTreatment")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("SemenCryopreservation")
                        .HasColumnType("bit");

                    b.Property<bool>("SexualHealthAddressed")
                        .HasColumnType("bit");

                    b.Property<string>("StageAtCurrentPresentation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageAtInitialPresentation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TherapeuticContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TreatmentInCantonalHospitalGraubunden")
                        .HasColumnType("bit");

                    b.HasKey("SmartOncologyPatientId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("GenderCD");

                    b.HasIndex("MultipleBirthId");

                    b.ToTable("SmartOncologyPatients");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.TaskEntry.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("EncounterId")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("ScheduledDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("TaskClassCD")
                        .HasColumnType("int");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskDocumentId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TaskEndDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TaskEntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskPriorityCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TaskStartDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TaskStatusCD")
                        .HasColumnType("int");

                    b.Property<int>("TaskTypeCD")
                        .HasColumnType("int");

                    b.HasKey("TaskId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EncounterId");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PatientId");

                    b.HasIndex("TaskClassCD");

                    b.HasIndex("TaskDocumentId");

                    b.HasIndex("TaskPriorityCD");

                    b.HasIndex("TaskStatusCD");

                    b.HasIndex("TaskTypeCD");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.TaskEntry.TaskDocument", b =>
                {
                    b.Property<int>("TaskDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskDocumentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskDocumentId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FormId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TaskDocumentCD")
                        .HasColumnType("int");

                    b.HasKey("TaskDocumentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("TaskDocumentCD");

                    b.ToTable("TaskDocuments");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.AdministrativeData", b =>
                {
                    b.Property<int>("AdministrativeDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdministrativeDataId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdministrativeDataId"));

                    b.Property<int>("ThesaurusEntryId")
                        .HasColumnType("int");

                    b.HasKey("AdministrativeDataId");

                    b.ToTable("AdministrativeDatas");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.O4CodeableConcept", b =>
                {
                    b.Property<int>("O4CodeableConceptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("O4CodeableConceptId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("O4CodeableConceptId"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodeSystemId")
                        .HasColumnType("int")
                        .HasColumnName("CodeSystemId");

                    b.Property<DateTimeOffset?>("EntryDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThesaurusEntryId")
                        .HasColumnType("int")
                        .HasColumnName("ThesaurusEntryId");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VersionPublishDate")
                        .HasColumnType("datetime2");

                    b.HasKey("O4CodeableConceptId");

                    b.HasIndex("CodeSystemId");

                    b.HasIndex("ThesaurusEntryId");

                    b.ToTable("O4CodeableConcepts");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.ThesaurusEntry", b =>
                {
                    b.Property<int>("ThesaurusEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ThesaurusEntryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThesaurusEntryId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("AdmnistrativeDataId")
                        .HasColumnType("int")
                        .HasColumnName("AdministrativeDataId");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PreferredLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("State")
                        .HasColumnType("int")
                        .HasColumnName("StateCD");

                    b.Property<string>("UriClassGUI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UriClassLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UriSourceGUI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UriSourceLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThesaurusEntryId");

                    b.HasIndex("AdmnistrativeDataId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.ToTable("ThesaurusEntries");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.ThesaurusEntryTranslation", b =>
                {
                    b.Property<int>("ThesaurusEntryTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ThesaurusEntryTranslationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThesaurusEntryTranslationId"));

                    b.Property<string>("AbbreviationsString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredTerm")
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<string>("SynonymsString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThesaurusEntryId")
                        .HasColumnType("int");

                    b.HasKey("ThesaurusEntryTranslationId");

                    b.HasIndex("ThesaurusEntryId");

                    b.ToTable("ThesaurusEntryTranslations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.ThesaurusMerge", b =>
                {
                    b.Property<int>("ThesaurusMergeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ThesaurusMergeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThesaurusMergeId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CompletedCollectionsString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FailedCollectionsString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("NewThesaurus")
                        .HasColumnType("int");

                    b.Property<int>("OldThesaurus")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int")
                        .HasColumnName("StateCD");

                    b.HasKey("ThesaurusMergeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.ToTable("ThesaurusMerges");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.Version", b =>
                {
                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VersionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VersionId"));

                    b.Property<int>("AdministrativeDataId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RevokedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("State")
                        .HasColumnType("int")
                        .HasColumnName("StateCD");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("TypeCD");

                    b.HasKey("VersionId");

                    b.HasIndex("AdministrativeDataId");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.Personnel", b =>
                {
                    b.Property<int>("PersonnelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonnelId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DayOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDoctor")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonnelConfigId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonnelOccupationId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonnelTypeCD")
                        .HasColumnType("int");

                    b.Property<int?>("PrefixCD")
                        .HasColumnType("int")
                        .HasColumnName("PrefixCD");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonnelId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PersonnelConfigId");

                    b.HasIndex("PersonnelOccupationId");

                    b.HasIndex("PersonnelTypeCD");

                    b.HasIndex("PrefixCD");

                    b.ToTable("Personnel");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelAcademicPosition", b =>
                {
                    b.Property<int>("PersonnelAcademicPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonnelAcademicPositionId"));

                    b.Property<int?>("AcademicPositionCD")
                        .HasColumnType("int");

                    b.Property<int?>("AcademicPositionTypeCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PersonnelAcademicPositionId");

                    b.HasIndex("AcademicPositionCD");

                    b.HasIndex("AcademicPositionTypeCD");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PersonnelId");

                    b.ToTable("PersonnelAcademicPositions");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelAddress", b =>
                {
                    b.Property<int>("PersonnelAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonnelAddressId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("AddressTypeCD")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CountryCD")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("PersonnelAddressId");

                    b.HasIndex("AddressTypeCD");

                    b.HasIndex("CountryCD");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PersonnelId");

                    b.ToTable("PersonnelAddresses");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelConfig", b =>
                {
                    b.Property<int>("PersonnelConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonnelConfigId"));

                    b.Property<string>("ActiveLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ActiveOrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PageSize")
                        .HasColumnType("int");

                    b.Property<string>("PredefinedFormsString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuggestedFormsString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZoneOffset")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonnelConfigId");

                    b.HasIndex("ActiveOrganizationId");

                    b.ToTable("PersonnelConfigs");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelIdentifier", b =>
                {
                    b.Property<int>("PersonnelIdentifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonnelIdentifierId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IdentifierPoolCD")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierTypeCD")
                        .HasColumnType("int");

                    b.Property<int?>("IdentifierUseCD")
                        .HasColumnType("int");

                    b.Property<string>("IdentifierValue")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PersonnelIdentifierId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("IdentifierPoolCD");

                    b.HasIndex("IdentifierTypeCD");

                    b.HasIndex("IdentifierUseCD");

                    b.HasIndex("PersonnelId");

                    b.ToTable("PersonnelIdentifiers");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelOccupation", b =>
                {
                    b.Property<int>("PersonnelOccupationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonnelOccupationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonnelOccupationId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OccupationCD")
                        .HasColumnType("int");

                    b.Property<int>("OccupationCategoryCD")
                        .HasColumnType("int");

                    b.Property<int>("OccupationSubCategoryCD")
                        .HasColumnType("int");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonnelSeniorityCD")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PersonnelOccupationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("OccupationCD");

                    b.HasIndex("OccupationCategoryCD");

                    b.HasIndex("OccupationSubCategoryCD");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("PersonnelSeniorityCD");

                    b.ToTable("PersonnelOccupations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelOrganization", b =>
                {
                    b.Property<int>("PersonnelOrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonnelOrganizationId"));

                    b.Property<bool?>("IsPracticioner")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeniorityLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speciality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("State")
                        .HasColumnType("int")
                        .HasColumnName("StateCD");

                    b.Property<string>("SubSpeciality")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonnelOrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonnelId");

                    b.ToTable("PersonnelOrganizations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelPosition", b =>
                {
                    b.Property<int>("PersonnelPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonnelPositionId"));

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<int?>("PositionCD")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PersonnelPositionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.HasIndex("PersonnelId");

                    b.HasIndex("PositionCD");

                    b.ToTable("PersonnelPositions");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelPositionPermissionView", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("ModuleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<int>("PersonnelPositionId")
                        .HasColumnType("int");

                    b.Property<int>("PositionCD")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("PersonnelPositionPermissionViews", (string)null);
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelView", b =>
                {
                    b.Property<int>("PersonnelId")
                        .HasColumnType("int")
                        .HasColumnName("PersonnelId");

                    b.Property<DateTimeOffset>("ActiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ActiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DayOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityStateCD")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EntryDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PersonnelAddresses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonnelIdentifiers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonnelOrganizationIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonnelOrganizations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonnelPositionIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonnelPositions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonnelTypeCD")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("StateCD")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonnelId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityStateCD");

                    b.ToTable((string)null);

                    b.ToView("PersonnelViews", (string)null);
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.AccessManagment.PermissionModule", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.AccessManagment.Module", "Module")
                        .WithMany("Permissions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.AccessManagment.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.AccessManagment.PositionPermission", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.AccessManagment.PermissionModule", "PermissionModule")
                        .WithMany()
                        .HasForeignKey("PermissionModuleId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Position")
                        .WithMany()
                        .HasForeignKey("PositionCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("PermissionModule");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Aliases.CodeAliasView", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Aliases.InboundAlias", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Code")
                        .WithMany()
                        .HasForeignKey("CodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Aliases.OutboundAlias", "OutboundAlias")
                        .WithMany()
                        .HasForeignKey("OutboundAliasId");

                    b.Navigation("Code");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("OutboundAlias");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Aliases.OutboundAlias", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Code")
                        .WithMany()
                        .HasForeignKey("CodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.Navigation("Code");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.ChemotherapySchema", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("Creator");

                    b.Navigation("EntityState");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.Indication", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.ChemotherapySchema", null)
                        .WithMany("Indications")
                        .HasForeignKey("ChemotherapySchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.LiteratureReference", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.ChemotherapySchema", null)
                        .WithMany("LiteratureReferences")
                        .HasForeignKey("ChemotherapySchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.Medication", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.ChemotherapySchema", null)
                        .WithMany("Medications")
                        .HasForeignKey("ChemotherapySchemaId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.Unit", "CumulativeDoseUnit")
                        .WithMany()
                        .HasForeignKey("CumulativeDoseUnitId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("CreatedBy");

                    b.Navigation("CumulativeDoseUnit");

                    b.Navigation("EntityState");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.MedicationDose", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.Medication", null)
                        .WithMany("MedicationDoses")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.MedicationDoseTime", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.MedicationDose", null)
                        .WithMany("MedicationDoseTimes")
                        .HasForeignKey("MedicationDoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.ChemotherapySchemaInstance", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.ChemotherapySchema", "ChemotherapySchema")
                        .WithMany()
                        .HasForeignKey("ChemotherapySchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.SmartOncologyPatient.SmartOncologyPatient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChemotherapySchema");

                    b.Navigation("CreatedBy");

                    b.Navigation("Creator");

                    b.Navigation("EntityState");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.ChemotherapySchemaInstanceVersion", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.ChemotherapySchemaInstance", null)
                        .WithMany("ChemotherapySchemaInstanceHistory")
                        .HasForeignKey("ChemotherapySchemaInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("Creator");

                    b.Navigation("EntityState");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.MedicationDoseInstance", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.MedicationInstance", null)
                        .WithMany("MedicationDoses")
                        .HasForeignKey("MedicationInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.MedicationDoseTimeInstance", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.MedicationDoseInstance", null)
                        .WithMany("MedicationDoseTimes")
                        .HasForeignKey("MedicationDoseInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.MedicationInstance", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.ChemotherapySchemaInstance", null)
                        .WithMany("Medications")
                        .HasForeignKey("ChemotherapySchemaInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.MedicationReplacement", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.ChemotherapySchemaInstance", null)
                        .WithMany("MedicationReplacements")
                        .HasForeignKey("ChemotherapySchemaInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.MedicationInstance", "ReplaceMedication")
                        .WithMany()
                        .HasForeignKey("ReplaceMedicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.MedicationInstance", "ReplaceWithMedication")
                        .WithMany()
                        .HasForeignKey("ReplaceWithMedicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Creator");

                    b.Navigation("EntityState");

                    b.Navigation("ReplaceMedication");

                    b.Navigation("ReplaceWithMedication");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ClinicalTrial.ClinicalTrial", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "ClinicalTrialIdentifierType")
                        .WithMany()
                        .HasForeignKey("ClinicalTrialIdentifierTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "ClinicalTrialRecruitmentStatus")
                        .WithMany()
                        .HasForeignKey("ClinicalTrialRecruitmentStatusCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "ClinicalTrialSponsorIdentifierType")
                        .WithMany()
                        .HasForeignKey("ClinicalTrialSponsorIdentifierTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.ProjectEntry.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.Navigation("ClinicalTrialIdentifierType");

                    b.Navigation("ClinicalTrialRecruitmentStatus");

                    b.Navigation("ClinicalTrialSponsorIdentifierType");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.CodeEntry.CodeAssociation", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.CodeEntry.FormCodeRelation", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Code")
                        .WithMany()
                        .HasForeignKey("CodeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.Navigation("Code");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Common.Code", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.CodeSet", null)
                        .WithMany()
                        .HasForeignKey("CodeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.ThesaurusEntry", "ThesaurusEntry")
                        .WithMany()
                        .HasForeignKey("ThesaurusEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("ThesaurusEntry");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Common.CodeSet", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.ThesaurusEntry", "ThesaurusEntry")
                        .WithMany()
                        .HasForeignKey("ThesaurusEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("ThesaurusEntry");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Encounter.Encounter", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "AdmitSource")
                        .WithMany()
                        .HasForeignKey("AdmitSourceCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EncounterClass")
                        .WithMany()
                        .HasForeignKey("ClassCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.EpisodeOfCare.EpisodeOfCare", "EpisodeOfCare")
                        .WithMany("Encounters")
                        .HasForeignKey("EpisodeOfCareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Patient.Patient", "Patient")
                        .WithMany("Encounters")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EncounterServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EncounterStatus")
                        .WithMany()
                        .HasForeignKey("StatusCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EncounterType")
                        .WithMany()
                        .HasForeignKey("TypeCD");

                    b.Navigation("AdmitSource");

                    b.Navigation("CreatedBy");

                    b.Navigation("EncounterClass");

                    b.Navigation("EncounterServiceType");

                    b.Navigation("EncounterStatus");

                    b.Navigation("EncounterType");

                    b.Navigation("EntityState");

                    b.Navigation("EpisodeOfCare");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Encounter.EncounterIdentifier", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Encounter.Encounter", "Encounter")
                        .WithMany("EncounterIdentifiers")
                        .HasForeignKey("EncounterId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "IdentifierPool")
                        .WithMany()
                        .HasForeignKey("IdentifierPoolCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "IdentifierType")
                        .WithMany()
                        .HasForeignKey("IdentifierTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "IdentifierUse")
                        .WithMany()
                        .HasForeignKey("IdentifierUseCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("Encounter");

                    b.Navigation("EntityState");

                    b.Navigation("IdentifierPool");

                    b.Navigation("IdentifierType");

                    b.Navigation("IdentifierUse");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Encounter.EncounterView", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Encounter.PersonnelEncounterRelation", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Encounter.Encounter", "Encounter")
                        .WithMany("PersonnelEncounterRelations")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "RelationType")
                        .WithMany()
                        .HasForeignKey("RelationTypeCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("Encounter");

                    b.Navigation("EntityState");

                    b.Navigation("Personnel");

                    b.Navigation("RelationType");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.EpisodeOfCare.EpisodeOfCare", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Patient.Patient", "Patient")
                        .WithMany("EpisodeOfCares")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.PersonnelTeamEntities.PersonnelTeam", "PersonnelTeam")
                        .WithMany()
                        .HasForeignKey("PersonnelTeamId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.SmartOncologyPatient.SmartOncologyPatient", null)
                        .WithMany("EpisodeOfCares")
                        .HasForeignKey("SmartOncologyPatientId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCD")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Type")
                        .WithMany()
                        .HasForeignKey("TypeCD")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("sReportsV2.Domain.Sql.Entities.Common.PeriodDatetime", "Period", b1 =>
                        {
                            b1.Property<int>("EpisodeOfCareId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("End")
                                .HasColumnType("datetime2")
                                .HasColumnName("Period_End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2")
                                .HasColumnName("Period_Start");

                            b1.HasKey("EpisodeOfCareId");

                            b1.ToTable("EpisodeOfCares");

                            b1.WithOwner()
                                .HasForeignKey("EpisodeOfCareId");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Patient");

                    b.Navigation("Period");

                    b.Navigation("PersonnelTeam");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.EpisodeOfCare.EpisodeOfCareWorkflow", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.EpisodeOfCare.EpisodeOfCare", "EpisodeOfCare")
                        .WithMany("WorkflowHistory")
                        .HasForeignKey("EpisodeOfCareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EpisodeOfCare");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.FormComment.Comment", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.GlobalThesaurusUser.GlobalThesaurusRole", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.GlobalThesaurusUser.GlobalThesaurusUser", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.GlobalThesaurusUser.GlobalThesaurusUserRole", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.GlobalThesaurusUser.GlobalThesaurusRole", "GlobalThesaurusRole")
                        .WithMany()
                        .HasForeignKey("GlobalThesaurusRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.GlobalThesaurusUser.GlobalThesaurusUser", "GlobalThesaurusUser")
                        .WithMany("GlobalThesaurusUserRoles")
                        .HasForeignKey("GlobalThesaurusUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("GlobalThesaurusRole");

                    b.Navigation("GlobalThesaurusUser");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.HL7.ErrorMessageLog", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "ErrorType")
                        .WithMany()
                        .HasForeignKey("ErrorTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.HL7.HL7MessageLog", "HL7MessageLog")
                        .WithMany()
                        .HasForeignKey("HL7MessageLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "SourceSystem")
                        .WithMany()
                        .HasForeignKey("SourceSystemCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("ErrorType");

                    b.Navigation("HL7MessageLog");

                    b.Navigation("SourceSystem");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.HL7.HL7MessageLog", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.HL7.Transaction", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Encounter.Encounter", "Encounter")
                        .WithMany()
                        .HasForeignKey("EncounterId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.HL7.HL7MessageLog", "HL7MessageLog")
                        .WithMany()
                        .HasForeignKey("HL7MessageLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Patient.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "SourceSystem")
                        .WithMany()
                        .HasForeignKey("SourceSystemCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "TransactionDirection")
                        .WithMany()
                        .HasForeignKey("TransactionDirectionCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("Encounter");

                    b.Navigation("EntityState");

                    b.Navigation("HL7MessageLog");

                    b.Navigation("Patient");

                    b.Navigation("SourceSystem");

                    b.Navigation("TransactionDirection");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.Organization", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.OrganizationEntities.OrganizationAddress", "OrganizationAddress")
                        .WithMany()
                        .HasForeignKey("OrganizationAddressId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.OrganizationEntities.OrganizationRelation", "OrganizationRelation")
                        .WithMany()
                        .HasForeignKey("OrganizationRelationId");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("OrganizationAddress");

                    b.Navigation("OrganizationRelation");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.OrganizationAddress", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.Navigation("AddressType");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.OrganizationClinicalDomain", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "ClinicalDomainCode")
                        .WithMany()
                        .HasForeignKey("ClinicalDomainCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.OrganizationEntities.Organization", "Organization")
                        .WithMany("ClinicalDomains")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicalDomainCode");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.OrganizationCommunicationEntity", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "OrgCommunicationEntity")
                        .WithMany()
                        .HasForeignKey("OrgCommunicationEntityCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.OrganizationEntities.Organization", "Organization")
                        .WithMany("OrganizationCommunicationEntities")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "PrimaryCommunicationSystem")
                        .WithMany()
                        .HasForeignKey("PrimaryCommunicationSystemCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "SecondaryCommunicationSystem")
                        .WithMany()
                        .HasForeignKey("SecondaryCommunicationSystemCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("OrgCommunicationEntity");

                    b.Navigation("Organization");

                    b.Navigation("PrimaryCommunicationSystem");

                    b.Navigation("SecondaryCommunicationSystem");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.OrganizationIdentifier", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "IdentifierPool")
                        .WithMany()
                        .HasForeignKey("IdentifierPoolCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "IdentifierType")
                        .WithMany()
                        .HasForeignKey("IdentifierTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "IdentifierUse")
                        .WithMany()
                        .HasForeignKey("IdentifierUseCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.OrganizationEntities.Organization", "Organization")
                        .WithMany("OrganizationIdentifiers")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("IdentifierPool");

                    b.Navigation("IdentifierType");

                    b.Navigation("IdentifierUse");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.OrganizationRelation", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.OrganizationEntities.Organization", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.OrganizationEntities.Organization", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.OrganizationTelecom", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.OrganizationEntities.Organization", "Organization")
                        .WithMany("Telecoms")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "System")
                        .WithMany()
                        .HasForeignKey("SystemCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Use")
                        .WithMany()
                        .HasForeignKey("UseCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Organization");

                    b.Navigation("System");

                    b.Navigation("Use");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OutsideUser.OutsideUser", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.OutsideUser.OutsideUserAddress", "OutsideUserAddress")
                        .WithMany()
                        .HasForeignKey("OutsideUserAddressId");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("OutsideUserAddress");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OutsideUser.OutsideUserAddress", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.Navigation("AddressType");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.Communication", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "LanguageCode")
                        .WithMany()
                        .HasForeignKey("LanguageCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Patient.Patient", null)
                        .WithMany("Communications")
                        .HasForeignKey("PatientId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.SmartOncologyPatient.SmartOncologyPatient", null)
                        .WithMany("Communications")
                        .HasForeignKey("SmartOncologyPatientId");

                    b.Navigation("LanguageCode");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.Patient", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Citizenship")
                        .WithMany()
                        .HasForeignKey("CitizenshipCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "MaritalStatus")
                        .WithMany()
                        .HasForeignKey("MaritalStatusCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Patient.MultipleBirth", "MultipleBirth")
                        .WithMany()
                        .HasForeignKey("MultipleBirthId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionCD");

                    b.Navigation("Citizenship");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Gender");

                    b.Navigation("MaritalStatus");

                    b.Navigation("MultipleBirth");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.PatientAddress", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Patient.Patient", "Patient")
                        .WithMany("PatientAddresses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.PatientContact", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "ContactRelationship")
                        .WithMany()
                        .HasForeignKey("ContactRelationshipCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "ContactRole")
                        .WithMany()
                        .HasForeignKey("ContactRoleCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Patient.Patient", "Patient")
                        .WithMany("PatientContacts")
                        .HasForeignKey("PatientId");

                    b.Navigation("ContactRelationship");

                    b.Navigation("ContactRole");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Gender");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.PatientContactAddress", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Patient.PatientContact", "PatientContact")
                        .WithMany("PatientContactAddresses")
                        .HasForeignKey("PatientContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("PatientContact");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.PatientContactTelecom", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Patient.PatientContact", "PatientContact")
                        .WithMany("PatientContactTelecoms")
                        .HasForeignKey("PatientContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "System")
                        .WithMany()
                        .HasForeignKey("SystemCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Use")
                        .WithMany()
                        .HasForeignKey("UseCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("PatientContact");

                    b.Navigation("System");

                    b.Navigation("Use");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.PatientIdentifier", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "IdentifierPool")
                        .WithMany()
                        .HasForeignKey("IdentifierPoolCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "IdentifierType")
                        .WithMany()
                        .HasForeignKey("IdentifierTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "IdentifierUse")
                        .WithMany()
                        .HasForeignKey("IdentifierUseCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Patient.Patient", "Patient")
                        .WithMany("PatientIdentifiers")
                        .HasForeignKey("PatientId");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("IdentifierPool");

                    b.Navigation("IdentifierType");

                    b.Navigation("IdentifierUse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.PatientTelecom", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Patient.Patient", "Patient")
                        .WithMany("PatientTelecoms")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "System")
                        .WithMany()
                        .HasForeignKey("SystemCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Use")
                        .WithMany()
                        .HasForeignKey("UseCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Patient");

                    b.Navigation("System");

                    b.Navigation("Use");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.PatientList.PatientList", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "AttendingDoctor")
                        .WithMany()
                        .HasForeignKey("AttendingDoctorId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EncounterStatus")
                        .WithMany()
                        .HasForeignKey("EncounterStatusCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EncounterType")
                        .WithMany()
                        .HasForeignKey("EncounterTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EpisodeOfCareType")
                        .WithMany()
                        .HasForeignKey("EpisodeOfCareTypeCD")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sReportsV2.Domain.Sql.Entities.PersonnelTeamEntities.PersonnelTeam", "PersonnelTeam")
                        .WithMany()
                        .HasForeignKey("PersonnelTeamId");

                    b.Navigation("AttendingDoctor");

                    b.Navigation("CreatedBy");

                    b.Navigation("EncounterStatus");

                    b.Navigation("EncounterType");

                    b.Navigation("EntityState");

                    b.Navigation("EpisodeOfCareType");

                    b.Navigation("PersonnelTeam");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.PatientList.PatientListPatientRelation", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Patient.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.PatientList.PatientList", "PatientList")
                        .WithMany("PatientListPatientRelations")
                        .HasForeignKey("PatientListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Patient");

                    b.Navigation("PatientList");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.PatientList.PatientListPersonnelRelation", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.PatientList.PatientList", "PatientList")
                        .WithMany("PatientListPersonnelRelations")
                        .HasForeignKey("PatientListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "Personnel")
                        .WithMany("PatientListPersonnelRelations")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("PatientList");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.PersonnelTeamEntities.PersonnelTeam", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Type")
                        .WithMany()
                        .HasForeignKey("TypeCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.PersonnelTeamEntities.PersonnelTeamOrganizationRelation", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.OrganizationEntities.Organization", "Organization")
                        .WithMany("PersonnelTeamOrganizationRelations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.PersonnelTeamEntities.PersonnelTeam", "PersonnelTeam")
                        .WithMany("PersonnelTeamOrganizationRelations")
                        .HasForeignKey("PersonnelTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "RelationType")
                        .WithMany()
                        .HasForeignKey("RelationTypeCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Organization");

                    b.Navigation("PersonnelTeam");

                    b.Navigation("RelationType");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.PersonnelTeamEntities.PersonnelTeamRelation", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "Personnel")
                        .WithMany("PersonnelTeams")
                        .HasForeignKey("PersonnelId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.PersonnelTeamEntities.PersonnelTeam", "PersonnelTeam")
                        .WithMany("PersonnelTeamRelations")
                        .HasForeignKey("PersonnelTeamId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "RelationType")
                        .WithMany()
                        .HasForeignKey("RelationTypeCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Personnel");

                    b.Navigation("PersonnelTeam");

                    b.Navigation("RelationType");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ProjectEntry.Project", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("ProjectType");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ProjectEntry.ProjectDocumentRelation", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.ProjectEntry.Project", "Project")
                        .WithMany("ProjectDocumentRelations")
                        .HasForeignKey("ProjectId");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ProjectEntry.ProjectPatientRelation", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Patient.Patient", "Patient")
                        .WithMany("ProjectPatientRelations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.ProjectEntry.Project", "Project")
                        .WithMany("ProjectPatientRelations")
                        .HasForeignKey("ProjectId");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Patient");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ProjectEntry.ProjectPersonnelRelation", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.ProjectEntry.Project", "Project")
                        .WithMany("ProjectPersonnelRelations")
                        .HasForeignKey("ProjectId");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Personnel");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.SmartOncologyPatient.SmartOncologyPatient", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Patient.MultipleBirth", "MultipleBirth")
                        .WithMany()
                        .HasForeignKey("MultipleBirthId");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Gender");

                    b.Navigation("MultipleBirth");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.TaskEntry.Task", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Encounter.Encounter", "Encounter")
                        .WithMany("Tasks")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Patient.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "TaskClass")
                        .WithMany()
                        .HasForeignKey("TaskClassCD")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sReportsV2.Domain.Sql.Entities.TaskEntry.TaskDocument", "TaskDocument")
                        .WithMany()
                        .HasForeignKey("TaskDocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "TaskPriority")
                        .WithMany()
                        .HasForeignKey("TaskPriorityCD")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusCD")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeCD")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Encounter");

                    b.Navigation("EntityState");

                    b.Navigation("Patient");

                    b.Navigation("TaskClass");

                    b.Navigation("TaskDocument");

                    b.Navigation("TaskPriority");

                    b.Navigation("TaskStatus");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.TaskEntry.TaskDocument", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "TaskDocumentCode")
                        .WithMany()
                        .HasForeignKey("TaskDocumentCD")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("TaskDocumentCode");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.O4CodeableConcept", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.CodeSystem.CodeSystem", "System")
                        .WithMany()
                        .HasForeignKey("CodeSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.ThesaurusEntry", null)
                        .WithMany("Codes")
                        .HasForeignKey("ThesaurusEntryId");

                    b.Navigation("System");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.ThesaurusEntry", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.AdministrativeData", "AdministrativeData")
                        .WithMany()
                        .HasForeignKey("AdmnistrativeDataId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AdministrativeData");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.ThesaurusEntryTranslation", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.ThesaurusEntry", "ThesaurusEntry")
                        .WithMany("Translations")
                        .HasForeignKey("ThesaurusEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThesaurusEntry");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.ThesaurusMerge", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.Version", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.AdministrativeData", "AdministrativeData")
                        .WithMany("VersionHistory")
                        .HasForeignKey("AdministrativeDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdministrativeData");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.Personnel", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.PersonnelConfig", "PersonnelConfig")
                        .WithMany()
                        .HasForeignKey("PersonnelConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.PersonnelOccupation", "PersonnelOccupation")
                        .WithMany()
                        .HasForeignKey("PersonnelOccupationId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "PersonnelType")
                        .WithMany()
                        .HasForeignKey("PersonnelTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Prefix")
                        .WithMany()
                        .HasForeignKey("PrefixCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("PersonnelConfig");

                    b.Navigation("PersonnelOccupation");

                    b.Navigation("PersonnelType");

                    b.Navigation("Prefix");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelAcademicPosition", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "AcademicPosition")
                        .WithMany()
                        .HasForeignKey("AcademicPositionCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "AcademicPositionType")
                        .WithMany()
                        .HasForeignKey("AcademicPositionTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "Personnel")
                        .WithMany("PersonnelAcademicPositions")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicPosition");

                    b.Navigation("AcademicPositionType");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelAddress", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "Personnel")
                        .WithMany("PersonnelAdresses")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelConfig", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.OrganizationEntities.Organization", "ActiveOrganization")
                        .WithMany()
                        .HasForeignKey("ActiveOrganizationId");

                    b.Navigation("ActiveOrganization");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelIdentifier", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "IdentifierPool")
                        .WithMany()
                        .HasForeignKey("IdentifierPoolCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "IdentifierType")
                        .WithMany()
                        .HasForeignKey("IdentifierTypeCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "IdentifierUse")
                        .WithMany()
                        .HasForeignKey("IdentifierUseCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "Personnel")
                        .WithMany("PersonnelIdentifiers")
                        .HasForeignKey("PersonnelId");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("IdentifierPool");

                    b.Navigation("IdentifierType");

                    b.Navigation("IdentifierUse");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelOccupation", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Occupation")
                        .WithMany()
                        .HasForeignKey("OccupationCD")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "OccupationCategory")
                        .WithMany()
                        .HasForeignKey("OccupationCategoryCD")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "OccupationSubCategory")
                        .WithMany()
                        .HasForeignKey("OccupationSubCategoryCD")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "PersonnelSeniority")
                        .WithMany()
                        .HasForeignKey("PersonnelSeniorityCD")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Occupation");

                    b.Navigation("OccupationCategory");

                    b.Navigation("OccupationSubCategory");

                    b.Navigation("Personnel");

                    b.Navigation("PersonnelSeniority");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelOrganization", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.OrganizationEntities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "Personnel")
                        .WithMany("Organizations")
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelPosition", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "Personnel")
                        .WithMany("PersonnelPositions")
                        .HasForeignKey("PersonnelId");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "Position")
                        .WithMany()
                        .HasForeignKey("PositionCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");

                    b.Navigation("Personnel");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.PersonnelView", b =>
                {
                    b.HasOne("sReportsV2.Domain.Sql.Entities.User.Personnel", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("sReportsV2.Domain.Sql.Entities.Common.Code", "EntityState")
                        .WithMany()
                        .HasForeignKey("EntityStateCD");

                    b.Navigation("CreatedBy");

                    b.Navigation("EntityState");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.AccessManagment.Module", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.ChemotherapySchema", b =>
                {
                    b.Navigation("Indications");

                    b.Navigation("LiteratureReferences");

                    b.Navigation("Medications");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.Medication", b =>
                {
                    b.Navigation("MedicationDoses");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchema.MedicationDose", b =>
                {
                    b.Navigation("MedicationDoseTimes");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.ChemotherapySchemaInstance", b =>
                {
                    b.Navigation("ChemotherapySchemaInstanceHistory");

                    b.Navigation("MedicationReplacements");

                    b.Navigation("Medications");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.MedicationDoseInstance", b =>
                {
                    b.Navigation("MedicationDoseTimes");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ChemotherapySchemaInstance.MedicationInstance", b =>
                {
                    b.Navigation("MedicationDoses");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Encounter.Encounter", b =>
                {
                    b.Navigation("EncounterIdentifiers");

                    b.Navigation("PersonnelEncounterRelations");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.EpisodeOfCare.EpisodeOfCare", b =>
                {
                    b.Navigation("Encounters");

                    b.Navigation("WorkflowHistory");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.GlobalThesaurusUser.GlobalThesaurusUser", b =>
                {
                    b.Navigation("GlobalThesaurusUserRoles");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.OrganizationEntities.Organization", b =>
                {
                    b.Navigation("ClinicalDomains");

                    b.Navigation("OrganizationCommunicationEntities");

                    b.Navigation("OrganizationIdentifiers");

                    b.Navigation("PersonnelTeamOrganizationRelations");

                    b.Navigation("Telecoms");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.Patient", b =>
                {
                    b.Navigation("Communications");

                    b.Navigation("Encounters");

                    b.Navigation("EpisodeOfCares");

                    b.Navigation("PatientAddresses");

                    b.Navigation("PatientContacts");

                    b.Navigation("PatientIdentifiers");

                    b.Navigation("PatientTelecoms");

                    b.Navigation("ProjectPatientRelations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.Patient.PatientContact", b =>
                {
                    b.Navigation("PatientContactAddresses");

                    b.Navigation("PatientContactTelecoms");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.PatientList.PatientList", b =>
                {
                    b.Navigation("PatientListPatientRelations");

                    b.Navigation("PatientListPersonnelRelations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.PersonnelTeamEntities.PersonnelTeam", b =>
                {
                    b.Navigation("PersonnelTeamOrganizationRelations");

                    b.Navigation("PersonnelTeamRelations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ProjectEntry.Project", b =>
                {
                    b.Navigation("ProjectDocumentRelations");

                    b.Navigation("ProjectPatientRelations");

                    b.Navigation("ProjectPersonnelRelations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.SmartOncologyPatient.SmartOncologyPatient", b =>
                {
                    b.Navigation("Communications");

                    b.Navigation("EpisodeOfCares");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.AdministrativeData", b =>
                {
                    b.Navigation("VersionHistory");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.ThesaurusEntry.ThesaurusEntry", b =>
                {
                    b.Navigation("Codes");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("sReportsV2.Domain.Sql.Entities.User.Personnel", b =>
                {
                    b.Navigation("Organizations");

                    b.Navigation("PatientListPersonnelRelations");

                    b.Navigation("PersonnelAcademicPositions");

                    b.Navigation("PersonnelAdresses");

                    b.Navigation("PersonnelIdentifiers");

                    b.Navigation("PersonnelPositions");

                    b.Navigation("PersonnelTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
