@using sReportsV2.Common.Extensions;
@using sReportsV2.DTOs.CodeEntry.DataOut;

@model sReportsV2.DTOs.DTOs.CodeAliases.DataOut.CodeAliasViewDataOut

<div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content modal-content-password">
        <div class="float-right filter-close-btn">
            <img alt="" class="close-modal" src="/css/img/icons/close_black.svg">
        </div>
        <div class="modal-body">
            <div class="form-group col-md-12">

                <form id="newAliasForm">
                    <input type="hidden" id="aliasId" value="@(Model != null ? Model.AliasId : 0)">
                    <input type="hidden" id="inboundAliasId" value="@(Model != null ? Model.InboundAliasId : 0)">
                    <input type="hidden" id="outboundAliasId" value="@(Model != null ? Model.OutboundAliasId : null)">
                    <div class="d-flex advanced-filter-header">
                        <img alt="" class="mr-3" src="/css/img/icons/change_password.svg">
                        <div id="title"></div>
                    </div>
                    <div class="advanced-filter-item input-margin">
                        <div class="display-flex">
                            <div class="input-container position-relative">
                                <div class="label filter-label" style="margin-right:39px">
                                    @sReportsV2.Cache.Resources.TextLanguage.CodeId
                                </div>
                                <div class="padding-left-5" id="aliasCodeId"></div>
                            </div>
                            <div class="input-container position-relative">
                                <div class="label filter-label">
                                    @sReportsV2.Cache.Resources.TextLanguage.CodeDisplay
                                </div>
                                <div class="padding-left-5" id="aliasCodeDisplay"></div>
                            </div>
                        </div>
                    </div>
                    <div class="advanced-filter-item input-margin">
                        <div class="label filter-label">
                            @sReportsV2.Cache.Resources.TextLanguage.System
                        </div>
                        <select required class="filter-input arrow-select" id="newAliasSystem" name="newAliasSystem">
                            <option value=""></option>
                            @{
                                var communicationSystems = ViewBag.CommunicationSystems as List<CodeDataOut>;
                                var filteredCommunicationSystem = ObjectExtension.FilterDataSource(communicationSystems);
                                bool selectedCommunicationSystemExists = false;
                                foreach (var communicationSystem in filteredCommunicationSystem)
                                {
                                    bool isSelected = Model != null && communicationSystem.Thesaurus.GetPreferredTermByTranslationOrDefault(ViewBag.UserCookieData.ActiveLanguage as string) == Model.System;
                                    selectedCommunicationSystemExists |= isSelected;
                                    <option value="@communicationSystem.Thesaurus.GetPreferredTermByTranslationOrDefault(ViewBag.UserCookieData.ActiveLanguage as string)"  @(Model.System == communicationSystem.Thesaurus.GetPreferredTermByTranslationOrDefault(ViewBag.UserCookieData.ActiveLanguage as string) ? "selected" : "")>
                                       @communicationSystem.Thesaurus.GetPreferredTermByTranslationOrDefault(ViewBag.UserCookieData.ActiveLanguage as string)
                                    </option>
                                }
                                if (Model != null && Model.System != null && !selectedCommunicationSystemExists)
                                {
                                    var communicationSystem = communicationSystems.FirstOrDefault(x => x.Thesaurus.GetPreferredTermByTranslationOrDefault(ViewBag.UserCookieData.ActiveLanguage as string) == Model.System);
                                    <option class="option-disabled" value="@communicationSystem.Thesaurus.GetPreferredTermByTranslationOrDefault(ViewBag.UserCookieData.ActiveLanguage as string)" disabled selected>
                                        @communicationSystem.Thesaurus.GetPreferredTermByTranslationOrDefault(ViewBag.UserCookieData.ActiveLanguage as string)
                                    </option>
                                }
                            }
                        </select>
                    </div>
                    <div class="advanced-filter-item input-margin">
                        <div class="label filter-label">
                            @sReportsV2.Cache.Resources.TextLanguage.Inbound
                        </div>
                        <input class="filter-input" type="text" id="newAliasInbound" name="newAliasInbound" onkeydown="pressButtonOnEnterKey(event, 'identifier-modal-button')" value="@(Model != null && Model.InboundAlias != null ? Model.InboundAlias : "")" />
                    </div>
                    <div class="advanced-filter-item input-margin">
                        <div class="label filter-label">
                            @sReportsV2.Cache.Resources.TextLanguage.Outbound
                        </div>
                        <input class="filter-input" type="text" id="newAliasOutbound" name="newAliasOutbound" onkeydown="pressButtonOnEnterKey(event, 'identifier-modal-button')" value="@(Model != null && Model.OutboundAlias != null ? Model.OutboundAlias : "")" />
                    </div>

                    <div class="advanced-filter-item input-margin">
                        <div class="label filter-label">
                            @sReportsV2.Cache.Resources.TextLanguage.ValidFrom
                        </div>
                        <input required class="filter-input" type="hidden" id="newValidFromDefault">
                        @await Html.PartialAsync("~/Views/Shared/DateInput.cshtml", new sReportsV2.DTOs.Common.DateInputDTO()
                        {
                           InputAttributes = new Dictionary<object, object> {
                                    { "class", "filter-input" },
                                    { "id", "validFromDefault" },
                                    { "name", "validFromDefault" },
                                    { "value", Model != null && Model.ActiveFrom != default(DateTimeOffset) ? Model.ActiveFrom.ToDateZoned(ViewBag.DateFormat as string) : "" },
                                    { "maxlength", "10" },
                                    { "data-maxlength", "10" },
                                },
                           InputBtnAttributes = new Dictionary<object, object> {
                                    { "class", "date-img" },
                                    { "onClick", "showDatePicker(event)"}
                                },
                        })
                    </div>

                    <div class="advanced-filter-item input-margin">
                        <div class="label filter-label">
                            @sReportsV2.Cache.Resources.TextLanguage.ValidTo
                        </div>
                        <input required class="filter-input" type="hidden" id="newValidToDefault">
                        @await Html.PartialAsync("~/Views/Shared/DateInput.cshtml", new sReportsV2.DTOs.Common.DateInputDTO()
                        {
                            InputAttributes = new Dictionary<object, object> {
                                { "class", "filter-input" },
                                { "id", "validToDefault" },
                                { "name", "validToDefault" },
                                { "value", Model != null && Model.ActiveTo != default(DateTimeOffset) ? Model.ActiveTo.ToDateZoned(ViewBag.DateFormat as string) : "" },
                                { "maxlength", "10" },
                                { "data-maxlength", "10" },
                            },
                            InputBtnAttributes = new Dictionary<object, object> {
                                { "class", "date-img" },
                                { "onClick", "showDatePicker(event)"}
                            },
                        })
                    </div>

                    <div class="button-partial">
                        <button id="identifier-modal-button" class="submit-button right-button margin-left-13" type="button" style="outline: none;" onclick="addNewAlias(event)" dismiss="modal">
                            <span class="submit-patient-info">@sReportsV2.Cache.Resources.TextLanguage.Save</span>
                        </button>
                        <div class="button-wrapper-filter float-right" id="close">
                            <a class="btn advanced-cancel" data-dismiss="modal" aria-label="Close">
                                @sReportsV2.Cache.Resources.TextLanguage.Cancel
                            </a>
                        </div>
                    </div>

                </form>
            </div>
        </div>
    </div>
</div>


<script>
    $(document).ready(function () {
        jQuery.validator.addMethod("validateActiveFromTo", function (value, element) {
            return compareActiveDate("validFromDefault", "validToDefault");
        }, "Active From shouldn't be greater than Active To!");

        jQuery.validator.addMethod("dateInputValidation", function (value, element) {
            return validateDateInput($(element));
        }, `Please put your date in [${getDateFormatDisplay()}] format.`);

        $("#newAliasForm").validate({
            onkeyup: false,
            rules: {
                validToDefault: {
                    validateActiveFromTo: true,
                    dateInputValidation: true
                },
                validFromDefault: {
                    dateInputValidation: true
                }
            }
        });
    });

    $("#validToDefault, #validFromDefault").on('change', function () {
        $("#newAliasForm").validate().element("#validToDefault");
        $("#newAliasForm").validate().element("#validFromDefault");
    });

</script>