@using sReportsV2.DTOs.Form.DataOut;
@using sReportsV2.DTOs.Field.DataOut;
@model FieldDataOut

@{
    FormDataOut form = ViewBag.Form as FormDataOut;
    DependentOnInfoDataOut dependentOnInfo = Model.DependentOn != null ? Model.DependentOn : new DependentOnInfoDataOut();
}

<div class="search-field-variable">
    <img alt="" class="search-field-variable-button" src="/css/img/icons/search_document_icon.svg" />
    <input type="text" class="form-control filter-input search-field-variable-input" placeholder="@sReportsV2.Cache.Resources.TextLanguage.Search ..." />
</div>
<div class="dependency-choose-variable-tree">
    <div class="cf nestable-lists ">
        <div class="dd nestableTree" id="nestableDependencyVariable">
            <ol class="dd-list dd-scrollable-container">
                <li class="dd-item "
                    data-id="@form.Id"
                    data-title="@form.Title"
                    data-itemtype="form">

                    <div class="dd-nohandle" data-toggle="tooltip" data-placement="left" title="@form.Title">
                        @form.Title
                    </div>

                    <ol class="dd-list">
                        @if (form != null && form.Chapters != null)
                        {
                            foreach (FormChapterDataOut chapterDataOut in form.Chapters)
                            {
                                <li class="dd-item "
                                    data-itemtype="chapter"
                                    data-id="@chapterDataOut.Id"
                                    data-title="@System.Net.WebUtility.UrlEncode(chapterDataOut.Title)">
                                    <div class="dd-handle " data-toggle="tooltip" data-placement="left" title="@chapterDataOut.Title">@chapterDataOut.Title</div>

                                    <ol class="dd-list">
                                        @if (chapterDataOut.Pages != null && chapterDataOut.Pages.Count > 0)
                                        {
                                            foreach (FormPageDataOut pageDataOut in chapterDataOut.Pages)
                                            {
                                                IEnumerable<FormFieldSetDataOut> formFieldSets = pageDataOut.GetFieldsForDependencyFormula(Model);

                                                <li class="dd-item" data-itemtype="page" data-id="@pageDataOut.Id" data-title="@System.Net.WebUtility.UrlEncode(pageDataOut.Title)">
                                                    <div class="dd-handle " data-toggle="tooltip" data-placement="left" title="@pageDataOut.Title">@pageDataOut.Title</div>
                                                    @if (formFieldSets.Count() > 0)
                                                    {
                                                        <ol class="dd-list">
                                                            @foreach (FormFieldSetDataOut formFieldSet in formFieldSets)
                                                            {
                                                                IEnumerable<FieldDataOut> fieldsForDependencyFormula = formFieldSet.GetFieldsForDependencyFormula(Model.Id);

                                                                if (fieldsForDependencyFormula.Count() > 0)
                                                                {
                                                                    <li class="dd-item " data-itemtype="fieldset" data-id="@formFieldSet.Id" data-title="@System.Net.WebUtility.UrlEncode(formFieldSet.Label)">
                                                                        <div class="dd-handle " data-toggle="tooltip" data-placement="left" title="@formFieldSet.Label">@(string.IsNullOrEmpty(formFieldSet.Label) ? "Label is not defined" : formFieldSet.Label)</div>

                                                                        <ol class="dd-list">
                                                                            @foreach (FieldDataOut field in fieldsForDependencyFormula)
                                                                            {
                                                                                <li class="dd-item" data-itemtype="field" data-id="@field.Id" data-field-id="@field.Id" data-field-type="@field.Type" data-title="@System.Net.WebUtility.UrlEncode(field.Label)">
                                                                                    <div class="dd-handle " data-toggle="tooltip" data-placement="left" title="@field.GetLabel()">@field.GetLabel()</div>
                                                                                    @{ 
                                                                                        RenderActionButton(ViewBag.ReadOnly, dependentOnInfo, true, field.Id); 
                                                                                    }
                                                                                    @if (field is FieldSelectableDataOut)
                                                                                    {
                                                                                        FieldSelectableDataOut fieldSelectable = field as FieldSelectableDataOut;
                                                                                        <ol class="dd-list">
                                                                                            @if (fieldSelectable.Values != null && fieldSelectable.Values.Count > 0)
                                                                                            {
                                                                                                foreach (FormFieldValueDataOut valueDataOut in fieldSelectable.Values)
                                                                                                {
                                                                                                    <li class="dd-item " data-itemtype="fieldvalue" data-id="@valueDataOut.Id" data-field-id="@field.Id" data-fieldvalue-id="@valueDataOut.Id" data-field-type="@field.Type" data-title="@System.Net.WebUtility.UrlEncode(valueDataOut.Label)">
                                                                                                        <div class="dd-handle " data-toggle="tooltip" data-placement="left" title="@valueDataOut.Label">@valueDataOut.Label</div>
                                                                                                        @{
                                                                                                            RenderActionButton(ViewBag.ReadOnly, dependentOnInfo, false, valueDataOut.Id);
                                                                                                        }
                                                                                                    </li>
                                                                                                }
                                                                                            }
                                                                                        </ol>
                                                                                    }
                                                                                </li>
                                                                            }
                                                                        </ol>
                                                                    </li>
                                                                }
                                                            }
                                                        </ol>
                                                    }
                                                </li>
                                            }
                                        }
                                    </ol>
                                </li>
                            }
                        }
                    </ol>
                </li>
            </ol>
        </div>
    </div>
</div>


@functions {
    private void RenderActionButton(bool readOnly, DependentOnInfoDataOut dependentOnInfo, bool fieldLevel, string itemId)
    {
        bool hasVariable = false;
        if (fieldLevel)
        {
            hasVariable = dependentOnInfo.HasDependentField(itemId);
        }
        else
        {
            hasVariable = dependentOnInfo.HasDependentFieldValue(itemId);
        }

        <img alt="" src="/css/img/icons/variable_field_added.svg" class="btn-added-variable variable-action-icon @(hasVariable ? "" : "d-none")" title="@sReportsV2.Cache.Resources.TextLanguage.FieldVariableAdded" />
        <img alt="" src="/css/img/icons/add_variable_field.svg" class="btn-add-variable variable-action-icon @(readOnly || hasVariable ? "d-none" : "")" title="@sReportsV2.Cache.Resources.TextLanguage.Add @sReportsV2.Cache.Resources.TextLanguage.Variable" />
    }
}