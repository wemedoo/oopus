
@using sReportsV2.DTOs.FormInstance.DataOut;
@using sReportsV2.Common.Extensions;
@using sReportsV2.Common.Constants;
@using sReportsV2.DTOs.DTOs.Form.DataOut;
@{
    var userCookieData = ViewBag.UserCookieData;
    var projectId = ViewBag.ProjectId;
    bool hasUpdatePerm = userCookieData.UserHasPermission(PermissionNames.Update, ModuleNames.Engine);
    bool hasDeletePerm = userCookieData.UserHasPermission(PermissionNames.Delete, ModuleNames.Engine);
    bool hasViewPerm = userCookieData.UserHasPermission(PermissionNames.View, ModuleNames.Engine);
}
<div class="table-responsive filter-border">
    <table class="table table-striped table-border">
        <thead class="color-header">
            <tr class="table-header-row">
                <th style="border-bottom: unset;border-top: unset;" class="padding-left-5">
                    <label class="form-checkbox-label form-checkbox-position">
                        <input id="selectAllCheckboxes" class="form-checkbox-field" type="checkbox" name="checkboxSelectAll" />
                        <i class="form-checkbox-button table-checkbox"></i>
                    </label>
                </th>
                @if (ViewBag.CustomHeaders != null && ViewBag.CustomHeaders.Count > 0)
                {
                    RenderHeader();
                }
                <th style="border-bottom: unset;border-top: unset;"></th>
            </tr>
        </thead>
        <tbody>

            @foreach (FormInstanceTableDataOut form in Model.Data)
            {
                <tr class="table-content-row" onclick="clickedRow(event, @hasUpdatePerm.ToJsBoolean(), '@form.Id', '@projectId', 'form-checkbox-button,form-checkbox-field')" id="row-@form.Id">
                    <td class="padding-left-5">
                        <label class="form-checkbox-label" id="checkBoxGroup">
                            <input value="@form.Id" class="form-checkbox-field" type="checkbox" data-title="@ViewBag.FormInstanceTitle-@form.EntryDatetime.ToTimeZonedDateTime(ViewBag.UserCookieData.TimeZoneOffset as string).ToString()" name="checkboxDownload" />
                            <i class="form-checkbox-button table-checkbox "></i>
                        </label>
                    </td>
                    @if (ViewBag.CustomHeaders != null && ViewBag.CustomHeaders.Count > 0)
                    {
                        RenderFieldValues(form);
                    }

                    <td>
                        @if (hasUpdatePerm || hasDeletePerm || hasViewPerm)
                        {
                            <div class="dropdown show">
                                <a class="dropdown-button" href="#" role="button" id="dropdownMenuLink-@form.Id" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <img alt="" class="dots" src="/css/img/icons/3dots.png">
                                </a>
                                <div class="dropdown-menu" aria-labelledby="dropdownMenuLink-@form.Id">
                                    @if (hasUpdatePerm)
                                    {
                                        <a class="dropdown-item" href="#" onclick="editEntity(event,'@form.Id', '@projectId')"><img alt="" class="edit-svg-size" src="/css/img/icons/edit.svg">@sReportsV2.Cache.Resources.TextLanguage.Edit</a>
                                    }
                                    @if (hasViewPerm)
                                    {
                                        <a class="dropdown-item" href="#" onclick="viewEntity(event,'@form.Id')"><img alt="" class="edit-svg-size" src="/css/img/icons/info_grey.svg">@sReportsV2.Cache.Resources.TextLanguage.View</a>
                                    }
                                    @if (hasDeletePerm)
                                    {
                                        <a class="dropdown-item" href="#" onclick="removeFormInstance(event,'@form.Id','@form.LastUpdate.ToString("o")')"><img alt="" class="edit-svg-size" src="/css/img/icons/remove.svg">@sReportsV2.Cache.Resources.TextLanguage.Delete</a>
                                    }
                                </div>
                            </div>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @if (Model.Data.Count == 0)
    {
        <div class="no-result-content">
            <img alt="" class="margin-" src="/css/img/icons/no_results.svg">
            <br>
            <div class="no-result-text">No result found!</div>
        </div>
    }
    @if (Model.Data.Count > 0)
    {
        <div class="pager-container">
            @await Html.PartialAsync("Pagination")
        </div>
    }
</div>


@functions {
    private void RenderHeader()
    {
        foreach (CustomHeaderFieldDataOut field in ViewBag.CustomHeaders)
        {
            string labelWithoutSpaces;
            if (field.DefaultHeaderCode != null)
            {
                labelWithoutSpaces = field.Label.Replace(" ", "");
            }
            else
            {
                labelWithoutSpaces = field.FieldId;
            }

            <th id="@labelWithoutSpaces" class="sort-arrow" style="border-bottom: unset; border-top: unset;" onclick="sortTable('@labelWithoutSpaces')">
                @field.GetCustomLabelOrLabel().ToUpper()
            </th>
        }
    }

    private void RenderFieldValues(FormInstanceTableDataOut form)
    {
        foreach (CustomHeaderFieldDataOut field in ViewBag.CustomHeaders)
        {
            if (!string.IsNullOrWhiteSpace(field.FieldId))
            {
                RenderCustomHeaderFieldValue(form, field.FieldId);
            }
            else
            {
                RenderDefaultHeaderFieldValue(form, field);
            }
        }
    }

    private void RenderCustomHeaderFieldValue(FormInstanceTableDataOut form, string fieldId)
    {
        <td>@form.GetFieldValueToDisplay(fieldId)</td>
    }

    private void RenderDefaultHeaderFieldValue(FormInstanceTableDataOut form, CustomHeaderFieldDataOut field)
    {
        string value = form.GetDefaultColumnValue(field, ViewBag.UserCookieData.TimeZoneOffset as string, ViewBag.DateFormat as string);
        if (field.Label == CustomHeaderConstants.Language)
        {
            <td>@sReportsV2.Cache.Resources.TextLanguage.ResourceManager.GetString(value)</td>

        }
        else if (value == CustomHeaderConstants.Unknown)
        {
            <td>@sReportsV2.Cache.Resources.TextLanguage.Unknown</td>
        }
        else
        {
            <td>@value</td>
        }
    }
}