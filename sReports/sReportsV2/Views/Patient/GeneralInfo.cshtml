@using System.Globalization
@using sReportsV2.DTOs.CodeEntry.DataOut;
@using sReportsV2.DTOs.Common.DTO;
@using sReportsV2.Common.Extensions;
@using sReportsV2.Common.Enums;
@model sReportsV2.DTOs.Patient.PatientDataOut
@{
    string activeLanguage = ViewBag.UserCookieData.ActiveLanguage;
    int selectedCitizenshipId = Model != null ? Model.CitizenshipId.GetValueOrDefault() : 0;
    int selectedReligionId = Model != null ? Model.ReligionId.GetValueOrDefault() : 0;
    List<CodeDataOut> languages = ViewBag.PatientLanguages as List<CodeDataOut>;
}
<div class="form-row remove-right-margin">

    <div class="general-partial">
        <div class="person-margin">
            <span class="person-info">@sReportsV2.Cache.Resources.TextLanguage.Person_Info</span>
        </div>

        <div class="edit-patient-left">
            <div class="advanced-filter-item input-margin">
                <div class="label filter-label">
                    @sReportsV2.Cache.Resources.TextLanguage.Given
                </div>
                <input type="text" class="filter-input" id="name" name="name" value="@(Model != null && Model.Name != null ? Model.Name : "")" required @ViewBag.Disabled>
            </div>

            <div class="advanced-filter-item input-margin">
                <div class="label filter-label">
                    @sReportsV2.Cache.Resources.TextLanguage.Gender
                </div>
                <select class="filter-input arrow-select patient-background" id="gender" name="gender"  data-codesetid="@((int)CodeSetList.Gender)" @ViewBag.Disabled>
                    <option value=""></option>
                    @{
                        var genders = ViewBag.Genders as List<CodeDataOut>;
                        var filteredGenders = ObjectExtension.FilterDataSource(genders);
                        bool selectedGendersExists = false;
                        foreach (var gender in filteredGenders)
                        {
                            bool isSelected = Model != null && gender.Id == Model.GenderId;
                            selectedGendersExists |= isSelected;
                            @await Html.PartialAsync("~/Views/Shared/SelectOption.cshtml", Tuple.Create(gender, false, isSelected))
                        }
                        if (Model != null && Model.GenderId != null && !selectedGendersExists)
                        {
                            ViewBag.SelectedId = Model.GenderId;
                            @await Html.PartialAsync("~/Views/Shared/SelectOption.cshtml", Tuple.Create(genders.FirstOrDefault(x => x.Id == Model.GenderId), true, true))
                        }
                    }
                </select>
            </div>

            <div class="advanced-filter-item input-margin">
                <div class="label filter-label">
                    @sReportsV2.Cache.Resources.TextLanguage.Religion
                </div>
                <select class="filter-input arrow-select patient-background" id="religion" name="religion" data-codesetid="@((int)CodeSetList.ReligiousAffiliationType)" @ViewBag.Disabled>
                </select>
            </div>

            <div class="advanced-filter-item input-margin">
                <div class="label filter-label">
                    @sReportsV2.Cache.Resources.TextLanguage.Citizenship
                </div>
                <select class="filter-input arrow-select patient-background" id="citizenship" name="citizenship" data-codesetid="@((int)CodeSetList.Citizenship)" @ViewBag.Disabled>
                    <option value=""></option>
                    @{
                        var citizenships = ViewBag.Citizenships as List<CodeDataOut>;
                        var filteredCitizenships = ObjectExtension.FilterDataSource(citizenships);
                        bool selectedCitizenshipsExists = false;
                        foreach (var citizenship in filteredCitizenships)
                        {
                            bool isSelected = Model != null && citizenship.Id == Model.CitizenshipId;
                            selectedCitizenshipsExists |= isSelected;
                            @await Html.PartialAsync("~/Views/Shared/SelectOption.cshtml", Tuple.Create(citizenship, false, isSelected))
                        }
                        if (Model != null && Model.CitizenshipId != null && !selectedCitizenshipsExists)
                        {
                            ViewBag.SelectedId = Model.CitizenshipId;
                            @await Html.PartialAsync("~/Views/Shared/SelectOption.cshtml", Tuple.Create(citizenships.FirstOrDefault(x => x.Id == Model.CitizenshipId), true, true))
                        }
                    }
                </select>
            </div>

            <div class="advanced-filter-item input-margin">
                <div class="label filter-label">
                    @sReportsV2.Cache.Resources.TextLanguage.MaritalStatus
                </div>
                <select class="filter-input arrow-select patient-background" id="maritalStatus" name="maritalStatus" data-codesetid="@((int)CodeSetList.MaritalStatus)" @ViewBag.Disabled>
                    <option value=""></option>
                    @{
                        var maritalStatuses = ViewBag.MaritalStatuses as List<CodeDataOut>;
                        var filteredMaritalStatuses = ObjectExtension.FilterDataSource(maritalStatuses);
                        bool selectedMaritalStatusExists = false;
                        foreach (var martialStatus in filteredMaritalStatuses)
                        {
                            bool isSelected = Model != null && martialStatus.Id == Model.MaritalStatusId;
                            selectedMaritalStatusExists |= isSelected;
                            @await Html.PartialAsync("~/Views/Shared/SelectOption.cshtml", Tuple.Create(martialStatus, false, isSelected))
                        }
                        if (Model != null && Model.MaritalStatusId != null && !selectedMaritalStatusExists)
                        {
                            ViewBag.SelectedId = Model.MaritalStatusId;
                            @await Html.PartialAsync("~/Views/Shared/SelectOption.cshtml", Tuple.Create(maritalStatuses.FirstOrDefault(x => x.Id == Model.MaritalStatusId), true, true))
                        }
                    }
                </select>
            </div>
        </div>

        <div class="edit-patient-right">
            <div class="advanced-filter-item input-margin">
                <div class="label filter-label">
                    @sReportsV2.Cache.Resources.TextLanguage.Family
                </div>
                <input type="text" class="filter-input" id="familyName" name="familyName" value="@(Model != null && Model.FamilyName != null ? Model.FamilyName : "")" @ViewBag.Disabled>
            </div>

            <div class="advanced-filter-item input-margin">
                <div class="label filter-label">
                    @sReportsV2.Cache.Resources.TextLanguage.BirthDate
                </div>
                @await Html.PartialAsync("~/Views/Shared/DateInput.cshtml", new sReportsV2.DTOs.Common.DateInputDTO()
                {
                    InputAttributes = new Dictionary<object, object> {
                        { "class", "filter-input" },
                        { "id", "birthDate" },
                        { "name", "birthDate" },
                        { "value", Model != null && Model.BirthDate != null ? Model.BirthDate.Value.ToString(ViewBag.DateFormat, CultureInfo.InvariantCulture) : "" },
                        { @ViewBag.Disabled, null }
                    },
                    InputBtnAttributes = new Dictionary<object, object> {
                        { "class", "date-img" },
                        { @Html.DateDisabled(((bool?)ViewBag.ReadOnly)), null }
                    },
                })
            </div>
            <div class="advanced-filter-item input-margin">
                <label class="form-checkbox-label reset-margin">
                    <input class="form-checkbox-field" type="checkbox" id="deceased" checked="@(Model != null && Model.Deceased.GetValueOrDefault())" @ViewBag.Disabled />
                    <i class="form-checkbox-button custom-checkbox"></i>
                    <span class="organization-types ml-2">
                        @sReportsV2.Cache.Resources.TextLanguage.Deceased
                    </span>
                </label>
            </div>
            <div class="advanced-filter-item input-margin" id="deceasedDateTimeContainer">
                <div class="label filter-label">
                    @sReportsV2.Cache.Resources.TextLanguage.Deceased_DateTime
                </div>
                @await Html.PartialAsync("~/Views/Shared/DateInput.cshtml", new sReportsV2.DTOs.Common.DateInputDTO()
                {
                    InputAttributes = new Dictionary<object, object> {
                        {"class", "filter-input"},
                        {"id", "deceasedDateTime" },
                        {"name", "deceasedDateTime" },
                        {"value", Model != null && Model.DeceasedDateTime != null ? Model.DeceasedDateTime.Value.ToString(ViewBag.DateFormat, CultureInfo.InvariantCulture) : "" },
                        { @ViewBag.Disabled, null}
                    },
                    InputBtnAttributes = new Dictionary<object, object> {
                        { "class", "date-img" },
                        { @Html.DateDisabled(((bool?)ViewBag.ReadOnly)), null }
                    },
                })
            </div>

            <div class="advanced-filter-item input-margin" id="multiple">
                <div class="label filter-label">
                    @sReportsV2.Cache.Resources.TextLanguage.Multiple_birth
                </div>
                <select class="filter-input arrow-select patient-background" id="multipleBirth" name="MultipleBirth" onchange="selectChanged()" @ViewBag.Disabled>
                    <option value=""></option>
                    <option value="true" @(Model != null && Model.MultipleBirth ? "selected" : "")>@sReportsV2.Cache.Resources.TextLanguage.True</option>
                    <option value="false" @(Model == null || !Model.MultipleBirth ? "selected" : "")>@sReportsV2.Cache.Resources.TextLanguage.False</option>
                </select>
            </div>

            <div class="advanced-filter-item input-margin" id="multipleBirth1" style=" @(Model != null && Model.MultipleBirth ? "" : "display:none") ">
                <div class="label filter-label">
                    @sReportsV2.Cache.Resources.TextLanguage.MultipleBirthNumber
                </div>
                <input type="number" class="filter-input" id="multipleBirthNumber" min="1" max="10" value="@(Model != null && Model.MultipleBirthNumber > 1 ? Model.MultipleBirthNumber : 1)" @ViewBag.Disabled>
            </div>
        </div>

    </div>


    <div class="telecom-space">

        @await Html.PartialAsync("IdentifierTable", Model != null ? Model.Identifiers : null)

        <div class="communication-part">
            <div class="person-margin communication">
                <span class="communication-info">@sReportsV2.Cache.Resources.TextLanguage.Communication</span>
            </div>
            <div class="advanced-filter-item input-margin margin-bottom-0">
                <div class="label filter-label">
                    @sReportsV2.Cache.Resources.TextLanguage.Language
                </div>
                <div class="position-relative">
                    <i class="fas fa-plus-circle plus-button"></i>
                    <select class="filter-input patient-background" id="language" style="-webkit-appearance: none;" @ViewBag.Disabled>
                        <option value=""></option>
                        @foreach (CodeDataOut language in languages)
                        {
                            <option value="@language.Id" @(Model != null && Model.LanguageCD == language.Id ? "selected" : "")>@language.Thesaurus.GetPreferredTermByTranslationOrDefault(activeLanguage)</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="preferred-item">
            <span class="preferred-language">@sReportsV2.Cache.Resources.TextLanguage.Languages</span>
            <span class="preferred-text">@sReportsV2.Cache.Resources.TextLanguage.SelectPreferred</span>
        </div>

        <div id="communicationTable" class="communication-table">
            <div id="tableBody">
                @if (Model != null && Model.Communications != null)
                {
                    foreach (CommunicationDTO entry in Model.Communications)
                    {
                        <div class="preferred-language-group @(entry.Preferred ? "preferred-language-text-active" : "")">
                            <span data-property="preferred" data-value="@entry.Preferred" class="radio-space">
                                <input data-id="@entry.Id" type="radio" name="radioPreferred" value="@entry.LanguageCD" class="form-radio-field" @ViewBag.Disabled data-no-color-change="true" @(entry.Preferred ? "checked" : "")>
                            </span>
                            <span id="firstLanguage" class="preferred-language-text" data-property="language" data-value="@entry.LanguageCD">@entry.ConvertLanguageCDToDisplayName(languages, activeLanguage)</span>
                        </div>
                    }
                }
            </div>
        </div>

        @if (Model != null)
        {
            <div class="communication communication-part" id="trialsContainer">
                @await Html.PartialAsync("PatientClinicalTrials")
            </div>
        }

    </div>
</div>

<script>
    religionId = @selectedReligionId;
</script>