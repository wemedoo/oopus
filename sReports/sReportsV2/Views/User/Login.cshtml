@using sReportsV2.Common.Helpers
@using sReportsV2.Models.MicrosoftAuthentification
@{
    var alerts = TempData.ContainsKey(Alert.AlertKey)
       ? (List<Alert>)TempData[Alert.AlertKey]
       : new List<Alert>();

    Layout = "";
    bool hasUsernameErrors = ViewData.ModelState["Username"] != null && ViewData.ModelState["Username"].Errors.Any();
    bool hasPasswordErrors = ViewData.ModelState["Password"] != null && ViewData.ModelState["Password"].Errors.Any();
    bool hasGeneralErrors = ViewData.ModelState["General"] != null && ViewData.ModelState["General"].Errors.Any();
}
@model sReportsV2.DTOs.User.DataIn.UserLoginDataIn
<!DOCTYPE html>
<html>
<head>
    @ScriptHelper.RenderHeadMetadata(true)
    <title>Login - @sReportsV2.Common.Constants.ResourceTypes.SoftwareName by weMedoo</title>
    @ScriptHelper.RenderStylesheet(Url.Content("/css/libs/bootstrap-4.3.1/bootstrap.min.css"))
    @ScriptHelper.RenderStylesheet("https://use.fontawesome.com/releases/v5.6.1/css/all.css", "sha384-gfdkjb5BdAXd+lj+gudLWI+BXq4IuLW5IT+brZEZsLFm++aCMlF1V92rMkPaX4PP", "anonymous")
    @ScriptHelper.RenderStylesheet(Url.Content("/css/login.css"))
    @ScriptHelper.RenderStylesheet(Url.Content("/css/common.css"))
</head>
<body class="login-background">
    @foreach (var alert in alerts)
    {
        <div>@alert.Message</div>
    }
    <div class="container">
        <div class="login">
            <div class="login-header">
                <span class="login-logo"></span>
                @await Html.PartialAsync("SmaragdLogo", new ViewDataDictionary(ViewData) { { "AdditionalCssClass", "in-login"} })
            </div>
            @using (Html.BeginForm("Login", "User", FormMethod.Post))
            {
                <div class="login-text">Login</div>
                <input type="hidden" id="timeZone" name="TimeZone">
                <div class="login-group margin-bottom-12">
                    <div class="login-input-icon @(hasUsernameErrors || hasGeneralErrors ? "error": "")">
                        <span class="input-user" id="basic-addon1"></span>
                    </div>
                    <div>
                        <label class="login-input-label">USERNAME</label>
                    </div>
                    <input type="text" class="login-input user-input @(hasUsernameErrors || hasGeneralErrors ? "error": "")" value="@(Model != null ? Model.Username : "")" aria-label="Username" aria-describedby="basic-addon1" name="username">
                    @if (hasUsernameErrors)
                    {
                        <div class="login-error">
                            @Html.ValidationMessageFor(m => m.Username)
                        </div>
                    }
                </div>
                <div class="login-group">
                    <div class="login-input-icon @(hasPasswordErrors || hasGeneralErrors ? "error": "")">
                        <span class="input-password" id="basic-addon2"></span>
                    </div>
                    <div>
                        <label class="login-input-label">PASSWORD</label>
                    </div>
                    <input type="password" class="login-input password-input @(hasPasswordErrors || hasGeneralErrors ? "error": "")" value="@(Model != null ? Model.Password : "")" aria-label="Password" aria-describedby="basic-addon2" name="password">
                    @if (hasPasswordErrors)
                    {
                        <div class="login-error">
                            @Html.ValidationMessageFor(m => m.Password)
                        </div>
                    }
                </div>
                if (hasGeneralErrors)
                {
                    <div class="login-error">
                        @Html.ValidationMessage("General")
                    </div>
                }
                if (Model != null && !string.IsNullOrWhiteSpace(Model.ReturnUrl.ToString()))
                {
                    <input type="hidden" value="@Model.ReturnUrl" name="ReturnUrl" id="ReturnUrl" />
                }
                else if (!string.IsNullOrEmpty(ViewBag.ReturnUrl as string))
                {
                    <input type="hidden" value="@ViewBag.ReturnUrl" name="ReturnUrl" id="ReturnUrl" />
                }
                <div style="display:flex">
                    <div class="login-button-forgot-password" onclick="forgotPassword()">Forgot Password?</div>
                </div>
                <button class="login-button" id="loginButton" type="submit">Login</button>
            }
        </div>

    </div>

    @Html.Raw(ScriptHelper.RenderScript(Url.Content("~/js/libs/jquery-3.7.1/jquery-3.7.1.slim.min.js"), "", ""));
    @Html.Raw(ScriptHelper.RenderScript(Url.Content("~/js/libs/popper-1.16.1/umd/popper.min.js"), "", ""));
    @Html.Raw(ScriptHelper.RenderScript(Url.Content("~/js/libs/bootstrap-4.3.1/bootstrap.min.js"), "", ""));
    @Html.Raw(ScriptHelper.RenderScript(Url.Content("~/js/sReports/userLogin/user.js"), "", ""))
</body>
</html>